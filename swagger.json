{
  "swagger": "2.0",
  "info": {
    "title": "Node API",
    "description": "Template API project for Node.js",
    "version": "1.0.0"
  },
  "basePath": "/api/node",
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/_checkAPIkey": {
      "get": {
        "tags": ["system"],
        "operationId": "checkAPIkey",
        "summary": "Test authentication setup",
        "description": "Secured test endpoint which can be used to validate that a client has a working authentication setup\n\n_(System.checkAPIKey)_",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The given authentication is **accepted**"
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["read"] }]
      }
    },
    "/v1/persons": {
      "get": {
        "tags": ["person"],
        "operationId": "getPersons",
        "summary": "All the Persons",
        "description": "Return all the stored person-objects.\n\n_(Person.getPerson)_\n\n",
        "responses": {
          "200": {
            "description": "Persons",
            "schema": { "$ref": "#/definitions/PersonObject" }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          }
        },
        "default": {
          "description": "Unexpected response - internal error"
        },
        "security": [{ "api_key": ["read"] }]
      }
    },
    "/v1/person/{id}": {
      "get": {
        "tags": ["person"],
        "operationId": "getPersonById",
        "summary": "Person with ID",
        "description": "Returns the earlier stored person-object with the given ID.\n\n_(Person.getPerson)_\n\n",
        "parameters": [{ "$ref": "#/parameters/PersonId" }],
        "responses": {
          "200": {
            "description": "The requested person",
            "schema": { "$ref": "#/definitions/PersonObject" }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No person found for given ID",
            "schema": {
              "type": "object",
              "properties": { "message": { "type": "string", "example": "document not found" } }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["read"] }]
      },
      "post": {
        "tags": ["person"],
        "operationId": "postPersonById",
        "summary": "Store person",
        "description": "Saves the given person-object, overwriting any old person with the same ID.\n\n_(Person.postPerson)_",
        "parameters": [{ "$ref": "#/parameters/PersonId" }, { "$ref": "#/parameters/PersonObject" }],
        "responses": {
          "200": {
            "description": "The stored person object",
            "schema": { "$ref": "#/definitions/PersonObject" }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Person validation failed: firstName: firstName is required. lastName: lastName is required."
                }
              }
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["write"] }]
      },
      "put": {
        "tags": ["person"],
        "operationId": "putPersonById",
        "summary": "Update an existing person object",
        "description": "overwriting any old person with the same ID.\n\n_(Person.putPerson)_",
        "parameters": [{ "$ref": "#/parameters/PersonId" }, { "$ref": "#/parameters/PersonObject" }],
        "responses": {
          "200": {
            "description": "The stored person object",
            "schema": { "$ref": "#/definitions/PersonObject" }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Person validation failed: firstName: firstName is required. \n\n lastName: lastName is required."
                }
              }
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No room found for given ID",
            "schema": {
              "type": "object",
              "properties": { "message": { "type": "string", "example": "document not found" } }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["write"] }]
      },
      "delete": {
        "tags": ["person"],
        "operationId": "deletePersonById",
        "summary": "Delete an existing person object",
        "description": "delete any old person with the same ID.\n\n_(Person.deletePerson)_",
        "parameters": [{ "$ref": "#/parameters/PersonId" }],
        "responses": {
          "204": {
            "description": "Person object deleted"
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No Person found for given ID",
            "schema": {
              "type": "object",
              "properties": { "message": { "type": "string", "example": "document not found" } }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["write"] }]
      }
    },
    "/v1/rooms": {
      "get": {
        "tags": ["room"],
        "operationId": "getRooms",
        "summary": "All the Rooms",
        "description": "Returns all the stored room-objects.\n\n_(Room.getRooms)_\n\n",
        "responses": {
          "200": {
            "description": "Rooms",
            "schema": { "$ref": "#/definitions/RoomObject" }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          }
        },
        "default": {
          "description": "Unexpected response - internal error"
        },
        "security": [{ "api_key": ["read"] }]
      }
    },
    "/v1/room/{id}": {
      "get": {
        "tags": ["room"],
        "operationId": "getRoomById",
        "summary": "Room with ID",
        "description": "Returns the earlier stored room-object with the given ID.\n\n_(Room.getRoom)_\n\n",
        "parameters": [{ "$ref": "#/parameters/RoomId" }],
        "responses": {
          "200": {
            "description": "The requested room",
            "schema": { "$ref": "#/definitions/RoomObject" }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No room found for given ID",
            "schema": {
              "type": "object",
              "properties": { "message": { "type": "string", "example": "document not found" } }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["read"] }]
      },
      "post": {
        "tags": ["room"],
        "operationId": "postRoomById",
        "summary": "Store Room",
        "description": "Saves the given room-object, overwriting any old room with the same ID.\n\n_(Room.postRoom)_",
        "parameters": [{ "$ref": "#/parameters/RoomId" }, { "$ref": "#/parameters/RoomObject" }],
        "responses": {
          "200": {
            "description": "The requested room",
            "schema": { "$ref": "#/definitions/RoomObject" }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "message": { "type": "string", "example": "room validation failed: name: name is required." }
              }
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["write"] }]
      },
      "put": {
        "tags": ["room"],
        "operationId": "putRoomById",
        "summary": "Update an existing room object",
        "description": "overwriting any old room with the same ID.\n\n_(Room.putRoom)_",
        "parameters": [{ "$ref": "#/parameters/RoomId" }, { "$ref": "#/parameters/RoomObject" }],
        "responses": {
          "200": {
            "description": "The stored room object",
            "schema": { "$ref": "#/definitions/RoomObject" }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Room validation failed: firstName: firstName is required. \n\n lastName: lastName is required."
                }
              }
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No room found for given ID",
            "schema": {
              "type": "object",
              "properties": { "message": { "type": "string", "example": "document not found" } }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["write"] }]
      },
      "delete": {
        "tags": ["room"],
        "operationId": "deleteRoomById",
        "summary": "Delete an existing room object",
        "description": "delete any old room with the same ID.\n\n_(Room.deleteRoom)_",
        "parameters": [{ "$ref": "#/parameters/RoomId" }],
        "responses": {
          "204": {
            "description": "Room object deleted"
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No room found for given ID",
            "schema": {
              "type": "object",
              "properties": { "message": { "type": "string", "example": "document not found" } }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [{ "api_key": ["write"] }]
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "parameters": {
    "PersonId": {
      "in": "path",
      "description": "ID of person object, e.g. \"123\"",
      "name": "id",
      "required": true,
      "type": "string"
    },
    "PersonObject": {
      "in": "body",
      "description": "Person to save with given ID",
      "name": "person",
      "required": true,
      "schema": {
        "type": "object",
        "properties": {
          "firstName": { "type": "string", "example": "John" },
          "lastName": { "type": "string", "example": "Doe" }
        }
      }
    },
    "RoomId": {
      "in": "path",
      "description": "ID of the room object, e.g., \"123\"",
      "name": "id",
      "required": true,
      "type": "string"
    },
    "RoomObject": {
      "in": "body",
      "description": "Room object that needs to be added to the store",
      "required": true,
      "name": "room",
      "schema": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "room A" },
          "isBooked": { "type": "boolean", "example": true },
          "relation": { "type": "array", "example": ["1", "2"] }
        }
      }
    }
  },
  "definitions": {
    "PersonObject": {
      "properties": {
        "id": { "type": "string", "example": "123" },
        "firstName": { "type": "string", "example": "John" },
        "lastName": { "type": "string", "example": "Doe" }
      }
    },
    "RoomObject": {
      "id": { "type": "string", "example": "123" },
      "type": "object",
      "required": ["name", "isBooked"],
      "properties": {
        "name": {
          "type": "string",
          "example": "Room A"
        },
        "isBooked": {
          "type": "boolean",
          "example": false
        },
        "relation": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of associated person IDs",
          "example": ["1", "2"]
        }
      }
    }
  }
}
